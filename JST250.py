"""Provisional JST250/JPCAM instrument and observational settings.
"""

import lenstronomy.Util.util as util

__all__ = ["JST250"]


# - keyword exposure_time: exposure time per image (in seconds)
# - keyword sky_brightness: sky brightness (in magnitude per square arcseconds in units of electrons)
# - keyword magnitude_zero_point: magnitude in which 1 count (e-) per second per arcsecond square is registered
# - keyword num_exposures: number of exposures that are combined (depends on coadd_years)
#     when coadd_years = 10: num_exposures is baseline num of visits over 10 years (x2 since 2x15s exposures per visit)
# - keyword seeing: Full-Width-at-Half-Maximum (FWHM) of PSF
# - keyword psf_type: string, type of PSF ('GAUSSIAN' supported)


class JST250(object):
    """Class contains LSST instrument and observation configurations."""

    def __init__(self, band="g", psf_type="GAUSSIAN", coadd_years=10):
        """

        :param band: string, 'u', 'g', 'r', 'i', 'z' or 'y' supported. Determines obs dictionary.
        :param psf_type: string, type of PSF ('GAUSSIAN' supported).
        :param coadd_years: int, number of years corresponding to num_exposures in obs dict. Currently supported: 1-10.
        """
        broad_filters = ['gSDSS', 'rSDSS', 'iSDSS']

        ret = {
            "exposure_time": 30 if band in broad_filters else 120,
            "sky_brightness": 22,
            "magnitude_zero_point": 25.3 if band in broad_filters else 22.5,
            "num_exposures": 60,
            "seeing": 0.70,
            "psf_type": "GAUSSIAN",
        }
        self.obs = ret
        self.band = band

        if psf_type != "GAUSSIAN":
            raise ValueError("psf_type %s not supported!" % psf_type)

        if coadd_years > 10 or coadd_years < 1:
            raise ValueError(
                " %s coadd_years not supported! Choose an integer between 1 and 10."
                % coadd_years
            )
        elif coadd_years != 10:
            self.obs["num_exposures"] = coadd_years * self.obs["num_exposures"] // 10

        self.camera = {
            "read_noise": 3.4,  # will be <10
            "pixel_scale": 0.23,
            "ccd_gain": 2.274,
        }

        # - keyword read_noise: std of noise generated by read-out (in units of electrons)
        # - keyword pixel_scale: scale (in arcseconds) of pixels
        # - keyword ccd_gain: electrons/ADU (analog-to-digital unit)

    def kwargs_single_band(self):
        """

        :return: merged kwargs from camera and obs dicts
        """
        kwargs = util.merge_dicts(self.camera, self.obs)
        return kwargs